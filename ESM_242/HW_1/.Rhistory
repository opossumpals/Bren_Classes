lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
pvnb_mine_func <- function(choice, int_state, discount, p, c0, c1, period) {
state<-vector(mode="numeric",length=0)
extraction<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
state[1]=int_state
extraction[1]=choice*state[1]
benefits[1]=(c0*extraction[1])+(c1*extraction[1]^2)
for(i in 2:(period+1)){
state[i]=state[i-1]*((c0*extraction[i])+(c1*extraction[i]^2))
extraction[i]=choice*state[i]
benefits[i]=(c0*extraction[i])+(c1*extraction[i]^2)
}
t=seq(from=0,period) #sequence from from 0 to period (0-19)
pv=discount^t*benefits #discount benefits to get the present value of benefits
npv=sum(pv) #sum all the present value of benefits
return(-npv) #returning - net present value. Remember nloptr minimizes npv, but we want the maximum. minimizing the negative will maximize the positive.
}
#Use these options with nloptr
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15,maxeval=16000)
out_npvb=nloptr(x0=0.5,eval_f=pvnb_mine_func,
lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
pvnb_mine_func <- function(choice, int_state, discount, p, c0, c1, period) {
state<-vector(mode="numeric",length=0)
extraction<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
state[1]=int_state
extraction[1]=choice*state[1]
benefits[1]=(c0*extraction[1])+(c1*extraction[1]^2)
for(i in 2:(period+1)){
state[i]=state[i-1]*((c0*extraction[i])+(c1*extraction[i]^2))
extraction[i]=choice*state[i]
benefits[i]=(c0*extraction[i])+(c1*extraction[i]^2)
}
t=seq(from=0,period) #sequence from from 0 to period (0-19)
pv=discount^t*benefits #discount benefits to get the present value of benefits
npv=sum(pv) #sum all the present value of benefits
return(-npv) #returning - net present value. Remember nloptr minimizes npv, but we want the maximum. minimizing the negative will maximize the positive.
}
#Use these options with nloptr
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15,maxeval=16000)
out_npvb=nloptr(x0=1,eval_f=pvnb_mine_func,
lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
pvnb_mine_func <- function(choice, int_state, discount, p, c0, c1, period) {
state<-vector(mode="numeric",length=0)
extraction<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
state[1]=int_state
extraction[1]=choice*state[1]
benefits[1]=(c0*extraction[1])+(c1*extraction[1]^2)
for(i in 2:(period+1)){
state[i]=state[i-1]*((c0*extraction[i])+(c1*extraction[i]^2))
extraction[i]=choice*state[i]
benefits[i]=(c0*extraction[i])+(c1*extraction[i]^2)
}
t=seq(from=0,period) #sequence from from 0 to period (0-19)
pv=discount^t*benefits #discount benefits to get the present value of benefits
npv=sum(pv) #sum all the present value of benefits
return(-npv) #returning - net present value. Remember nloptr minimizes npv, but we want the maximum. minimizing the negative will maximize the positive.
}
#Use these options with nloptr
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15,maxeval=16000)
out_npvb=nloptr(eval_f=pvnb_mine_func,
lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
pvnb_mine_func <- function(choice, int_state, discount, p, c0, c1, period) {
state<-vector(mode="numeric",length=0)
extraction<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
state[1]=int_state
extraction[1]=choice*state[1]
benefits[1]=(c0*extraction[1])+(c1*extraction[1]^2)
for(i in 2:(period+1)){
state[i]=state[i-1]*((c0*extraction[i])+(c1*extraction[i]^2))
extraction[i]=choice*state[i]
benefits[i]=(c0*extraction[i])+(c1*extraction[i]^2)
}
t=seq(from=0,period) #sequence from from 0 to period (0-19)
pv=discount^t*benefits #discount benefits to get the present value of benefits
npv=sum(pv) #sum all the present value of benefits
return(-npv) #returning - net present value. Remember nloptr minimizes npv, but we want the maximum. minimizing the negative will maximize the positive.
}
#Use these options with nloptr
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15,maxeval=16000)
out_npvb=nloptr(x0=0, eval_f=pvnb_mine_func,
lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
pvnb_mine_func <- function(choice, int_state, discount, p, c0, c1, period) {
state<-vector(mode="numeric",length=0)
extraction<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
state[1]=int_state
extraction[1]=choice*state[1]
benefits[1]=(c0*extraction[1])+(c1*extraction[1]^2)
for(i in 2:(period+1)){
state[i]=state[i-1]*((c0*extraction[i])+(c1*extraction[i]^2))
extraction[i]=choice*state[i]
benefits[i]=(c0*extraction[i])+(c1*extraction[i]^2)
}
t=seq(from=0,period) #sequence from from 0 to period (0-19)
pv=discount^t*benefits #discount benefits to get the present value of benefits
npv=sum(pv) #sum all the present value of benefits
return(-npv) #returning - net present value. Remember nloptr minimizes npv, but we want the maximum. minimizing the negative will maximize the positive.
}
#Use these options with nloptr
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15,maxeval=16000)
out_npvb=nloptr(x0=int_state, eval_f=pvnb_mine_func,
lb=0, ub=1,
opts = options, int_state=1, discount=0.05, p=5, c0=0.8, c1=-0.1, period=9)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nloptr)
library(knitr)
#objective function
fish_obj <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
benefits[1]=p*y[1]-c*E[1]^2
#for loop
for(i in 2:(period)) {
state[i]=state[i-1] - choice[i-1]
benefits[i]=p*y[i]-c*E[i-1]^2
}
state[period+1] = state[period]-choice[period]
benefits[period+1] = p*y[period+1]-c*E[period+1]^2
t=seq(from=0, period)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
fish_const <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
const <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
const[1]=choice[1]-state[1]
#for loop
for(i in 2:(period)) {
state[i]=state[i-1]-choice[i-1]
const[i]=choice[i]-state[i]
}
return(const)
}
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=51
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
#objective function
#is choice q or E?
#state is x
fish_obj <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
benefits[1]=p*(q*state[1]*choice[1])-c*choice[1]^2
#for loop
for(i in 2:(period)) {
state[i]=state[i-1] - choice[i-1]
benefits[i]=p*(q*state[i]*choice[i])[i]-c*choice[i-1]^2
}
state[period+1] = state[period]+(r*state[period](1-(state[period]/K)))-q*state[period]*choice[period]
benefits[period+1] = p*q*state[period+1]-c*choice[period+1]^2
t=seq(from=0, period-1)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
fish_const <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
const <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
const[1]=choice[1]-state[1]
#for loop
for(i in 2:(period)) {
state[i]=state[i-1]-choice[i-1]
const[i]=choice[i]-state[i]
}
return(const)
}
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
#objective function
#is choice q or E?
#state is x
fish_obj <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
benefits[1]=p*(q*state[1]*choice[1])-c*choice[1]^2
#for loop
for(i in 2:(period)) {
state[i]=state[i-1] - choice[i-1]
benefits[i]=p*(q*state[i]*choice[i])[i]-c*choice[i-1]^2
}
state[period+1] = state[period]+(r*state[period]*(1-(state[period])/K))-q*state[period]*choice[period]
benefits[period+1] = p*q*state[period+1]-c*choice[period+1]^2
t=seq(from=0, period-1)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
fish_const <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
const <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
const[1]=choice[1]-state[1]
#for loop
for(i in 2:(period)) {
state[i]=state[i-1]-choice[i-1]
const[i]=choice[i]-state[i]
}
return(const)
}
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(nloptr)
library(knitr)
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=0,
opts = options,
discount=0.03,a=10,b=53.27,c=300,p=1)
print ( out_tree1$solution )
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=0,
opts = options,
discount=0.03,a=10,b=53.27,c=600,p=1)
print ( out_tree1$solution )
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=0,
opts = options,
discount=0.03,a=10,b=53.27,c=300,p=2)
print ( out_tree1$solution )
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=0,
opts = options,
discount=0.05,a=10,b=53.27,c=300,p=2)
print ( out_tree1$solution )
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=15, #ex: if you set lb to 15, you constrain the age of trees to be at least 15 years old
opts = options,
discount=0.05,a=10,b=53.27,c=300,p=2)
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=10,
eval_f=obj_fcn_tree1,
lb=15, #ex: if you set lb to 15, you constrain the age of trees to be at least 15 years old
opts = options,
discount=0.03,a=10,b=53.27,c=300,p=1)
obj_fcn_tree1<-function(choice,a,b,c,p,discount){
Q=exp(a-b/choice)
benefits = (p*Q*exp(-discount*choice)-c)/(1-exp(-discount*choice))
return(-benefits)
}
options=list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-8,maxeval=16000)
out_tree1=nloptr(x0=15,
eval_f=obj_fcn_tree1,
lb=15, #ex: if you set lb to 15, you constrain the age of trees to be at least 15 years old
opts = options,
discount=0.03,a=10,b=53.27,c=300,p=1)
print ( out_tree1$solution )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nloptr)
library(knitr)
#objective function
#is choice q or E?
#state is x
fish_obj <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
benefits[1]=p*(q*state[1]*choice[1])-c*choice[1]^2
#for loop
for(i in 2:(period)) {
state[i]=state[i-1] - choice[i-1]
benefits[i]=p*(q*state[i]*choice[i])[i]-c*choice[i-1]^2
}
state[period+1] = state[period]+(r*state[period]*(1-(state[period])/K))-q*state[period]*choice[period]
benefits[period+1] = p*q*state[period+1]-c*choice[period+1]^2
t=seq(from=0, period-1)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
fish_const <- function(choice, int_state, discount, r, K, q, p, c) {
#vectors
state <- vector(mode="numeric", length=0)
const <- vector(mode="numeric", length=0)
#initial state
state[1]=int_state
const[1]=choice[1]-state[1]
#for loop
for(i in 2:(period)) {
state[i]=state[i-1]-choice[i-1]
const[i]=choice[i]-state[i]
}
return(const)
}
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
lb=0,
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
lb=rep(0, period),
discount = 0.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
## Use this options list for nloptr
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-5)
options=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=50
out_fish_a <- nloptr(
x0= rep(0.1, period),
opts=options,
int_state = 0.5,
eval_f = fish_obj,
eval_g_ineq = fish_const,
lb=rep(0, period),
discount = 1/1.05,
r = 0.1,
K = 1,
q = 0.01,
p = 500,
c = .01
)
