state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2)) #no discount^t because it is multiplied in pv
}
t=seq(from=0, period)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
stock_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = period)
state[1] = int_state
for (i in 2:period) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 25
return(constraint)  # No violation of constraints
}
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options_2=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=11
out_2a <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2a$solution,3)
round(-out_2a$objective, 3)
stock_2a_table<-function(choice, int_state=40, period=11, a=2, b=-0.25, p=100, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,length.out=length(benefits))
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2a$solution[12]=NA
tbl_out_2a=round(stock_2a_table(out_2a$solution), 3)
kable(tbl_out_2a)
out_2b <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=150,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2b$solution,3)
round(-out_2b$objective, 3)
stock_2b_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,length.out=length(benefits))
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2b$solution[12]=NA
tbl_out_2b=round(stock_2b_table(out_2b$solution), 3)
kable(tbl_out_2b)
stock_2c_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = period)
state[1] = int_state
for (i in 2:length(choice)) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 10
return(constraint)  # No violation of constraints
}
out_2c <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_2c_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(10, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2c$solution,3)
round(-out_2c$objective, 3)
stock_2c_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,length.out=length(benefits))
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2c$solution[12]=NA
tbl_out_2c=round(stock_2c_table(out_2c$solution), 3)
kable(tbl_out_2c)
stock_obj_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
period=11
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:period) {
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2)) #no discount^t because it is multiplied in pv
}
t=seq(from=0, period)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
stock_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = 0)
state[1] = int_state
for (i in 2:period) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 25
return(constraint)  # No violation of constraints
}
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options_2=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=11
out_2a <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2a$solution,3)
round(-out_2a$objective, 3)
stock_2a_table<-function(choice, int_state=40, period=11, a=2, b=-0.25, p=100, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2a$solution[12]=NA
tbl_out_2a=round(stock_2a_table(out_2a$solution), 3)
stock_2a_table<-function(choice, int_state=40, period=11, a=2, b=-0.25, p=100, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2a$solution[11]=NA
tbl_out_2a=round(stock_2a_table(out_2a$solution), 3)
stock_obj_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
period=11
state <- vector(mode="numeric", length=0)
benefits <- vector(mode="numeric", length=0)
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:period) {
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2)) #no discount^t because it is multiplied in pv
}
t=seq(from=0, period)
pv=discount^t*benefits
npv=sum(pv)
return(-npv)
}
stock_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = period)
state[1] = int_state
for (i in 2:period) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 25
return(constraint)  # No violation of constraints
}
local_opts<-list("algorithm"="NLOPT_LN_COBYLA",xtol_rel=1e-15)
options_2=list("algorithm"="NLOPT_LN_AUGLAG",xtol_rel=1e-15,maxeval=16000,"local_opts"=local_opts)
period=11
out_2a <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2a$solution,3)
round(-out_2a$objective, 3)
stock_2a_table<-function(choice, int_state=40, period=11, a=2, b=-0.25, p=100, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2a$solution[12]=NA
tbl_out_2a=round(stock_2a_table(out_2a$solution), 3)
stock_2a_table<-function(choice, int_state=40, period=11, a=2, b=-0.25, p=100, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2a$solution[12]=NA
tbl_out_2a=round(stock_2a_table(out_2a$solution), 3)
kable(tbl_out_2a)
out_2b <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=150,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2b$solution,3)
round(-out_2b$objective, 3)
stock_2b_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=0)
benefits<-vector(mode="numeric",length=0)
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2b$solution[12]=NA
tbl_out_2b=round(stock_2b_table(out_2b$solution), 3)
out_2b <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=150,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2b$solution,3)
round(-out_2b$objective, 3)
stock_2b_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=period)
benefits<-vector(mode="numeric",length=period)
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2b$solution[12]=NA
tbl_out_2b=round(stock_2b_table(out_2b$solution), 3)
out_2b <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=150,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2b$solution,3)
round(-out_2b$objective, 3)
stock_2b_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,period)
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2b$solution[12]=NA
tbl_out_2b=round(stock_2b_table(out_2b$solution), 3)
kable(tbl_out_2b)
stock_2c_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = period)
state[1] = int_state
for (i in 2:period) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 10
return(constraint)  # No violation of constraints
}
out_2c <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_2c_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(10, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2c$solution,3)
round(-out_2c$objective, 3)
stock_2c_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,length.out=length(benefits))
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2c$solution[12]=NA
tbl_out_2c=round(stock_2c_table(out_2c$solution), 3)
kable(tbl_out_2c)
stock_2c_const_func <- function(choice, int_state, a, b, p, gamma, alpha, discount) {
# Need to calculate state for the last period
# Not constraining every time, just for the last state
state <- vector(mode = "numeric", length = period)
state[1] = int_state
for (i in 2:period) {
state[i] = state[i-1] * (1 - gamma) + alpha * choice[i-1]
}
# Constraint for choice[11]
constraint = state[11] - 10
return(constraint)  # No violation of constraints
}
out_2c <- nloptr(
x0=rep(0.1, times=period),
eval_f=stock_obj_func,
eval_g_eq=stock_2c_const_func,
opts=options_2,
lb=rep(0, times=period),
ub=rep(50, times=period),
int_state=40,
a=2,
b=-0.25,
p=100,
alpha=2,
gamma=0.2,
discount=1/1.04
)
round(out_2c$solution,3)
round(-out_2c$objective, 3)
stock_2c_table <- function(choice, int_state=40, period=11, a=2, b=-0.25, p=150, alpha=2, gamma=0.2, discount=1/1.04){
#storage vectors
state<-vector(mode="numeric",length=length(choice))
benefits<-vector(mode="numeric",length=length(choice))
#initial state and benefits
state[1]=int_state
benefits[1]=(p*choice[1]-(a*state[1]-b*state[1]^2))
for(i in 2:(period)){
state[i]=state[i-1]*(1-gamma)+alpha*choice[i-1]
benefits[i]=(p*choice[i]-(a*state[i]-b*state[i]^2))
}
t=seq(from=0,length.out=length(benefits))
#constraint=state[11]-25
pv=discount^t*benefits
return(data.frame("Period"=t, "PVNB"=pv, "Stock pollutant"=state, "Production"=choice))
}
out_2c$solution[12]=NA
tbl_out_2c=round(stock_2c_table(out_2c$solution), 3)
kable(tbl_out_2c)
